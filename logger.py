import logging
import sys
from datetime import datetime
from pathlib import Path
from typing import Dict, Optional, Union

from config import settings

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
EMOJI_LEVELS: Dict[int, str] = {
    logging.DEBUG: "üîç",
    logging.INFO: "‚ÑπÔ∏è",
    logging.WARNING: "‚ö†Ô∏è",
    logging.ERROR: "‚ùå",
    logging.CRITICAL: "üî•"
}

# –°–ª–æ–≤–∞—Ä—å —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
OPERATION_NAMES: Dict[str, str] = {
    "database_init": "üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
    "database_connect": "üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
    "api_key_create": "üîë –°–æ–∑–¥–∞–Ω–∏–µ API –∫–ª—é—á–∞",
    "api_key_delete": "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ API –∫–ª—é—á–∞",
    "api_key_validate": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞",
    "chat_completion": "üí¨ –ó–∞–ø—Ä–æ—Å —á–∞—Ç–∞",
    "admin_validate": "üëÆ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    "server_start": "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞",
    "request_received": "üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å",
    "request_processed": "üì§ –û–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å",
    "error": "‚ùå –û—à–∏–±–∫–∞"
}


class CustomFormatter(logging.Formatter):
    """–§–æ—Ä–º–∞—Ç—Ç–µ—Ä –ª–æ–≥–æ–≤ —Å —ç–º–æ–¥–∑–∏ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏"""

    def format(self, record):
        emoji = EMOJI_LEVELS.get(record.levelno, "")
        record.emoji = emoji

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
        record.timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        return super().format(record)


def setup_logger(name: str, log_level: Union[str, int] = "INFO") -> logging.Logger:
    # –ï—Å–ª–∏ log_level —É–∂–µ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ logging
    if isinstance(log_level, int):
        level = log_level
    else:
        level = getattr(logging, log_level, settings.LOG_LEVEL)

    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger(name)
    logger.setLevel(level)

    # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    if logger.handlers:
        return logger

    # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(level)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    log_format = "%(emoji)s [%(timestamp)s] %(levelname)s [%(name)s] - %(message)s"
    formatter = CustomFormatter(log_format)
    console_handler.setFormatter(formatter)

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
    logger.addHandler(console_handler)

    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏, –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if settings.DEBUG:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        log_dir = Path("logs")
        log_dir.mkdir(exist_ok=True)

        # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª
        file_handler = logging.FileHandler(f"logs/{name}.log", encoding="utf-8")
        file_handler.setLevel(level)
        file_handler.setFormatter(formatter)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫ –ª–æ–≥–≥–µ—Ä—É
        logger.addHandler(file_handler)

    return logger

def log_operation(logger: logging.Logger, operation: str, details: str = "", level: int = logging.INFO) -> None:
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —ç–º–æ–¥–∑–∏"""
    operation_name = OPERATION_NAMES.get(operation, operation)
    message = f"{operation_name}: {details}" if details else operation_name
    logger.log(level, message)